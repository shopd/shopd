// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: session.sql

package sqlite

import (
	"context"
)

const sessionByUserID = `-- name: SessionByUserID :one
select user.email, user.username, user.role, user.verified as user_verified, 
user.disabled, session.user_id, session.otp, session.verified, session.attempts, session.mod
from user join session on session.user_id = user.user_id
where user.user_id = ? limit 1
`

type SessionByUserIDRow struct {
	Email        string `db:"email"`
	Username     string `db:"username"`
	Role         string `db:"role"`
	UserVerified int64  `db:"user_verified"`
	Disabled     int64  `db:"disabled"`
	UserID       string `db:"user_id"`
	Otp          string `db:"otp"`
	Verified     int64  `db:"verified"`
	Attempts     int64  `db:"attempts"`
	Mod          string `db:"mod"`
}

// SessionByUserID fetches a single row
func (q *Queries) SessionByUserID(ctx context.Context, userID string) (SessionByUserIDRow, error) {
	row := q.db.QueryRowContext(ctx, sessionByUserID, userID)
	var i SessionByUserIDRow
	err := row.Scan(
		&i.Email,
		&i.Username,
		&i.Role,
		&i.UserVerified,
		&i.Disabled,
		&i.UserID,
		&i.Otp,
		&i.Verified,
		&i.Attempts,
		&i.Mod,
	)
	return i, err
}
